/*
* generated by Xtext
*/
package knowledge.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import knowledge.xtext.services.KnowDEECoGrammarAccess;

public class KnowDEECoParser extends AbstractContentAssistParser {
	
	@Inject
	private KnowDEECoGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected knowledge.xtext.ui.contentassist.antlr.internal.InternalKnowDEECoParser createParser() {
		knowledge.xtext.ui.contentassist.antlr.internal.InternalKnowDEECoParser result = new knowledge.xtext.ui.contentassist.antlr.internal.InternalKnowDEECoParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
					put(grammarAccess.getAbstractKnowledgeAccess().getAlternatives(), "rule__AbstractKnowledge__Alternatives");
					put(grammarAccess.getKnowledgeNodeAccess().getAlternatives(), "rule__KnowledgeNode__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getDEECoModelAccess().getGroup(), "rule__DEECoModel__Group__0");
					put(grammarAccess.getDEECoModelAccess().getGroup_3(), "rule__DEECoModel__Group_3__0");
					put(grammarAccess.getDEECoModelAccess().getGroup_3_3(), "rule__DEECoModel__Group_3_3__0");
					put(grammarAccess.getDEECoModelAccess().getGroup_4(), "rule__DEECoModel__Group_4__0");
					put(grammarAccess.getDEECoModelAccess().getGroup_4_3(), "rule__DEECoModel__Group_4_3__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getEnsembleAccess().getGroup(), "rule__Ensemble__Group__0");
					put(grammarAccess.getEnsembleAccess().getGroup_4(), "rule__Ensemble__Group_4__0");
					put(grammarAccess.getProcessAccess().getGroup(), "rule__Process__Group__0");
					put(grammarAccess.getProcessAccess().getGroup_4(), "rule__Process__Group_4__0");
					put(grammarAccess.getKnowledgeElementAccess().getGroup(), "rule__KnowledgeElement__Group__0");
					put(grammarAccess.getKnowledgeElementAccess().getGroup_3(), "rule__KnowledgeElement__Group_3__0");
					put(grammarAccess.getKnowledgeElementAccess().getGroup_3_3(), "rule__KnowledgeElement__Group_3_3__0");
					put(grammarAccess.getKnowledgeElementAccess().getGroup_7(), "rule__KnowledgeElement__Group_7__0");
					put(grammarAccess.getLeafAccess().getGroup(), "rule__Leaf__Group__0");
					put(grammarAccess.getLeafAccess().getGroup_4(), "rule__Leaf__Group_4__0");
					put(grammarAccess.getLeafAccess().getGroup_5(), "rule__Leaf__Group_5__0");
					put(grammarAccess.getLeafAccess().getGroup_5_3(), "rule__Leaf__Group_5_3__0");
					put(grammarAccess.getLeafAccess().getGroup_6(), "rule__Leaf__Group_6__0");
					put(grammarAccess.getDEECoModelAccess().getElementsAssignment_3_2(), "rule__DEECoModel__ElementsAssignment_3_2");
					put(grammarAccess.getDEECoModelAccess().getElementsAssignment_3_3_1(), "rule__DEECoModel__ElementsAssignment_3_3_1");
					put(grammarAccess.getDEECoModelAccess().getKnowledgesAssignment_4_2(), "rule__DEECoModel__KnowledgesAssignment_4_2");
					put(grammarAccess.getDEECoModelAccess().getKnowledgesAssignment_4_3_1(), "rule__DEECoModel__KnowledgesAssignment_4_3_1");
					put(grammarAccess.getEnsembleAccess().getNameAssignment_2(), "rule__Ensemble__NameAssignment_2");
					put(grammarAccess.getEnsembleAccess().getPeriodAssignment_4_1(), "rule__Ensemble__PeriodAssignment_4_1");
					put(grammarAccess.getProcessAccess().getNameAssignment_2(), "rule__Process__NameAssignment_2");
					put(grammarAccess.getProcessAccess().getPeriodAssignment_4_1(), "rule__Process__PeriodAssignment_4_1");
					put(grammarAccess.getKnowledgeElementAccess().getNameAssignment_1(), "rule__KnowledgeElement__NameAssignment_1");
					put(grammarAccess.getKnowledgeElementAccess().getReaderAssignment_3_2(), "rule__KnowledgeElement__ReaderAssignment_3_2");
					put(grammarAccess.getKnowledgeElementAccess().getReaderAssignment_3_3_1(), "rule__KnowledgeElement__ReaderAssignment_3_3_1");
					put(grammarAccess.getKnowledgeElementAccess().getChildAssignment_6(), "rule__KnowledgeElement__ChildAssignment_6");
					put(grammarAccess.getKnowledgeElementAccess().getChildAssignment_7_1(), "rule__KnowledgeElement__ChildAssignment_7_1");
					put(grammarAccess.getLeafAccess().getNameAssignment_2(), "rule__Leaf__NameAssignment_2");
					put(grammarAccess.getLeafAccess().getTypeAssignment_4_1(), "rule__Leaf__TypeAssignment_4_1");
					put(grammarAccess.getLeafAccess().getReaderAssignment_5_2(), "rule__Leaf__ReaderAssignment_5_2");
					put(grammarAccess.getLeafAccess().getReaderAssignment_5_3_1(), "rule__Leaf__ReaderAssignment_5_3_1");
					put(grammarAccess.getLeafAccess().getWriterAssignment_6_1(), "rule__Leaf__WriterAssignment_6_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			knowledge.xtext.ui.contentassist.antlr.internal.InternalKnowDEECoParser typedParser = (knowledge.xtext.ui.contentassist.antlr.internal.InternalKnowDEECoParser) parser;
			typedParser.entryRuleDEECoModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public KnowDEECoGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(KnowDEECoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
